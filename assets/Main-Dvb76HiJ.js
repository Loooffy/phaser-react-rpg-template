import{P as p,k as r,p as h}from"./index-CCNV7c5W.js";import"./phaser-Czz4FBZH.js";import"./react-CiW5Bwbg.js";var n=(s=>(s[s.AbovePlayer=10]="AbovePlayer",s[s.AboveWorld=20]="AboveWorld",s))(n||{});const d="tuxemon-sample-32px-extruded";var o=(s=>(s.BelowPlayer="Below Player",s.World="World",s.AbovePlayer="Above Player",s.Objects="Objects",s))(o||{}),c=(s=>(s.SpawnPoint="Spawn Point",s.Sign="Sign",s))(c||{});const l={Horizontal:175,Vertical:175};class m extends p.Physics.Arcade.Sprite{body;cursors;selector;constructor(e,a,t,i=r.atlas.player,y="misa-front"){super(e,a,t,i,y),e.add.existing(this),e.physics.world.enable(this),this.setSize(32,42).setOffset(0,22),this.setCollideWorldBounds(!0),e.cameras.main.startFollow(this),e.cameras.main.setZoom(1),this.cursors=this.createCursorKeys(),this.createAnimations(),this.selector=e.physics.add.staticBody(a-8,t+32,16,16)}createCursorKeys(){return this.scene.input.keyboard.addKeys("w,a,s,d,up,left,down,right,space")}createAnimations(){const e=this.scene.anims;e.exists("player_left")||e.create({key:"player_left",frames:e.generateFrameNames(r.atlas.player,{prefix:"misa-left-walk.",start:0,end:3,zeroPad:3}),frameRate:10,repeat:-1}),e.exists("player_right")||e.create({key:"player_right",frames:e.generateFrameNames(r.atlas.player,{prefix:"misa-right-walk.",start:0,end:3,zeroPad:3}),frameRate:10,repeat:-1}),e.exists("player_up")||e.create({key:"player_up",frames:e.generateFrameNames(r.atlas.player,{prefix:"misa-back-walk.",start:0,end:3,zeroPad:3}),frameRate:10,repeat:-1}),e.exists("player_down")||e.create({key:"player_down",frames:e.generateFrameNames(r.atlas.player,{prefix:"misa-front-walk.",start:0,end:3,zeroPad:3}),frameRate:10,repeat:-1})}moveSelector(e){const{body:a,selector:t}=this;switch(e){case"player_left":t.x=a.x-19,t.y=a.y+14;break;case"player_right":t.x=a.x+35,t.y=a.y+14;break;case"player_up":t.x=a.x+8,t.y=a.y-18;break;case"player_down":t.x=a.x+8,t.y=a.y+46;break}}update(){const{anims:e,body:a,cursors:t}=this,i=a.velocity.clone();switch(a.setVelocity(0),!0){case t.left.isDown:case t.a.isDown:a.setVelocityX(-175);break;case t.right.isDown:case t.d.isDown:a.setVelocityX(l.Horizontal);break}switch(!0){case t.up.isDown:case t.w.isDown:a.setVelocityY(-175);break;case t.down.isDown:case t.s.isDown:a.setVelocityY(l.Vertical);break}switch(a.velocity.normalize().scale(l.Horizontal),!0){case t.left.isDown:case t.a.isDown:e.play("player_left",!0),this.moveSelector("player_left");break;case t.right.isDown:case t.d.isDown:e.play("player_right",!0),this.moveSelector("player_right");break;case t.up.isDown:case t.w.isDown:e.play("player_up",!0),this.moveSelector("player_up");break;case t.down.isDown:case t.s.isDown:e.play("player_down",!0),this.moveSelector("player_down");break;default:switch(e.stop(),!0){case i.x<0:this.setTexture(r.atlas.player,"misa-left"),this.moveSelector("player_left");break;case i.x>0:this.setTexture(r.atlas.player,"misa-right"),this.moveSelector("player_right");break;case i.y<0:this.setTexture(r.atlas.player,"misa-back"),this.moveSelector("player_up");break;case i.y>0:this.setTexture(r.atlas.player,"misa-front"),this.moveSelector("player_down");break}}}}class f extends h.Scene{player;sign;tilemap;worldLayer;constructor(){super(r.scene.main)}create(){this.tilemap=this.make.tilemap({key:r.tilemap.tuxemon});const e=this.tilemap.addTilesetImage(d,r.image.tuxemon);this.tilemap.createLayer(o.BelowPlayer,e,0,0),this.worldLayer=this.tilemap.createLayer(o.World,e,0,0);const a=this.tilemap.createLayer(o.AbovePlayer,e,0,0);this.worldLayer.setCollisionByProperty({collides:!0}),this.physics.world.bounds.width=this.worldLayer.width,this.physics.world.bounds.height=this.worldLayer.height,a.setDepth(n.AbovePlayer),this.addPlayer(),this.cameras.main.setBounds(0,0,this.tilemap.widthInPixels,this.tilemap.heightInPixels)}addPlayer(){const e=this.tilemap.findObject(o.Objects,({name:a})=>a===c.SpawnPoint);this.player=new m(this,e.x,e.y),this.addPlayerSignInteraction(),this.physics.add.collider(this.player,this.worldLayer)}addPlayerSignInteraction(){const e=this.tilemap.findObject(o.Objects,({name:a})=>a===c.Sign);this.sign=this.physics.add.staticBody(e.x,e.y,e.width,e.height),this.sign.text=e.properties[0].value,this.physics.add.overlap(this.sign,this.player.selector,void 0,void 0,this)}update(){this.player.update()}}export{f as default};
